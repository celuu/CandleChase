{"version":3,"file":"main.js","mappings":"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","sources":["webpack://candle-chase/./src/candle_chase/position.js","webpack://candle-chase/./src/candle_chase/candle.js","webpack://candle-chase/./src/candle_chase/board.js","webpack://candle-chase/./src/candle_chase/input.js","webpack://candle-chase/./src/candle_chase/character.js","webpack://candle-chase/./src/candle_chase/enemy.js","webpack://candle-chase/./src/candle_chase/game.js","webpack://candle-chase/./src/index.js"],"sourcesContent":["export default class Position {\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}","export default class Candle{\n    constructor(x, y){\n        this.isLit = false;\n        this.x = x;\n        this.y = y;\n        this.width = 50;\n        this.height = 50;\n    }\n\n\n}","const gridWidth = 15;\nconst gridHeight = 10;\n\nimport Position from \"./position\";\nimport Candle from \"./candle\";\n\n\nexport default class Board{\n\n    constructor(candleCanvas, screenCanvas){\n        this.candleCanvas = candleCanvas;\n        this.screenCanvas = screenCanvas;\n        this.candleCtx = candleCanvas.getContext('2d');\n        this.screenCtx = screenCanvas.getContext('2d');\n        this.dimensions = { width: screenCanvas.width, height: screenCanvas.height }\n        this.grid = this.makeEmptyGrid();\n        this.candles = this.generateCandles();\n        this.allCandlesLit = false;\n        this.width = 100;\n        this.height = 100;\n        this.candleWidth = 50;\n        this.candleHeight = 50;\n        this.x = 350;\n        this.y = 0;\n        this.speed = 0;\n        this.maxSpeed = 5;\n        this.spriteWidth = 128;\n        this.spriteHeight = 128;\n        this.frame = 1;\n        this.timer = 0;\n    }\n\n    update(character, keys){\n        if(keys.includes('Space')){\n            let allLit = true;\n            for (let i = 0; i < this.candles.length; i++) {\n                let candle = this.candles[i];\n                let a = character.x  - candle.x ;\n                let b = character.y  - candle.y;\n                let distanceBetween = Math.sqrt(a * a + b * b);\n                if(distanceBetween < 100){\n                    candle.isLit = true;\n                }\n                allLit = allLit && candle.isLit\n            } \n            this.allCandlesLit = allLit;\n        }\n    }\n\n    draw(character){\n        this.drawAllCandles()\n        this.drawInitialScreen()\n        this.removeScreen(character.x + 70, character.y + 50, 40); \n        this.removeScreen(500, 120, 60);\n        this.removeScreenForTimer(20, 40, 225, 45);\n\n        for (let i = 0; i < this.candles.length; i++) {\n            let candle = this.candles[i];\n            if (candle.isLit) {\n                this.removeScreen(candle.x + 25, candle.y + 10, 30);\n            }\n        } \n    }\n\n    removeScreenForTimer(topLeft, topRight, bottomLeft, bottomRight) {\n        this.screenCtx.fillStyle = \"#FFFFFF\";\n        this.screenCtx.fillRect(topLeft, topRight, bottomLeft, bottomRight);\n        this.screenCtx.fill();\n        this.screenCtx.globalCompositeOperation = \"destination-out\";\n        this.screenCtx.shadowBlur = 30;\n        this.screenCtx.shadowColor = \"white\";\n\n        this.screenCtx.lineWidth = 5;\n        this.screenCtx.stroke();\n    }\n\n    drawInitialScreen(){\n        this.screenCtx.globalCompositeOperation = \"source-over\";\n        this.screenCtx.fillStyle = \"black\";\n        this.screenCtx.fillRect(0, 0, this.dimensions.width, this.dimensions.height);\n    }\n\n    removeScreen(x, y, radius) {\n        this.screenCtx.globalCompositeOperation = \"destination-out\";\n        this.screenCtx.shadowBlur = 30;\n        this.screenCtx.shadowColor = \"white\";\n\n        for (let i = 0; i < 5; i++) {\n            this.screenCtx.beginPath();\n            this.screenCtx.arc(x, y, radius, 0, 2 * Math.PI, false);\n            this.screenCtx.fill();\n            this.screenCtx.lineWidth = 5;\n            this.screenCtx.stroke();\n        }\n    }\n\n    makeEmptyGrid() {\n        let grid = [];\n        for (let row = 0; row < gridHeight; row++){\n            grid.push([]);\n            for (let col = 0; col < gridWidth; col++) {\n                grid[row].push(null);\n            }        \n        }\n        return grid;\n    }\n\n    isValidPos(pos) {\n        if (pos.row < 0 || pos.row >= gridHeight) {\n            return false;\n        }\n        if (pos.col < 0 || pos.col >= gridWidth) {\n            return false;\n        }\n        return true;\n    }\n\n    isEmpty(pos) {\n        const result = this.grid[pos.row][pos.col] === null\n        return result\n    }\n\n    isAvailableForPlacement(pos) {\n        if (!this.isValidPos(pos)) {\n            return false;\n        }\n        for(let rowAdjust = -1; rowAdjust < 2; rowAdjust++){\n            for (let colAdjust = -1; colAdjust < 2; colAdjust++){\n                let newPos = new Position(pos.row + rowAdjust, pos.col + colAdjust)\n                if (!this.isValidPos(newPos) || !this.isEmpty(newPos)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    generateCandles(){\n        let maxCount = 10;\n        let placedCount = 0;\n        let attempts = 0\n        let candles = [];\n\n        while (placedCount < maxCount && attempts < 100){\n            attempts += 1;\n            let candleRow = (Math.floor(Math.random() * gridHeight));\n            let candleCol = (Math.floor(Math.random() * gridWidth));\n            const pos = new Position(candleRow, candleCol);\n            if (this.isAvailableForPlacement(pos)) {\n                this.grid[pos.row][pos.col] = \"X\"\n                let gridPosition = this.calculateXY(pos);\n                placedCount++;\n                const xOffset = -10 + (Math.floor(Math.random() * 20))\n                const yOffset = -10 + (Math.floor(Math.random() * 20))\n                const newCandle = new Candle(gridPosition.x + xOffset, gridPosition.y + yOffset)\n                candles.push(newCandle);\n            }\n        }\n        if (attempts >= 100) {\n            console.error(\"gave up\")\n        }\n\n        return candles;\n    }\n\n    calculateXY(pos) {\n        let row = pos.row;\n        let col = pos.col;\n        let hash = {}\n        const topPadding = 150;\n        const leftPadding = 10;\n        const rightPadding = 10;\n        const placeableHeight = this.dimensions.height - topPadding;\n        const placeableWidth = this.dimensions.width - leftPadding - rightPadding;\n        let x = placeableWidth * (col/gridWidth) + leftPadding;\n        hash[\"x\"] = x\n        let y = placeableHeight * (row/gridHeight) + topPadding;\n        hash[\"y\"] = y\n        return hash;\n    }\n\n    drawAllCandles() {\n        if (this.candleImage) {\n            for (let i = 0; i < this.candles.length; i++) {\n                let candle = this.candles[i];\n                if(candle.isLit){\n                    let litCandle = new Image();\n                    litCandle.src = './images/lit-candles.png';\n                    this.candleCtx.drawImage(litCandle, candle.x, candle.y, this.candleWidth, this.candleHeight);\n                }\n                this.candleCtx.drawImage(this.candleImage, candle.x, candle.y, this.candleWidth, this.candleHeight);\n            }\n            return\n        }\n\n        let candleImage = new Image();\n        candleImage.src = './images/candles.png';\n        \n        candleImage.onload = () => {\n            this.candleImage = candleImage\n        }\n    }\n\n}","\nexport default class InputHandler {\n\n    constructor(){\n        this.keys = [];\n        window.addEventListener('keydown', e => {\n            if((e.code === 'ArrowDown' ||\n                e.code === 'ArrowUp' ||\n                e.code === 'ArrowLeft' ||\n                e.code === 'ArrowRight' ||\n                e.code === \"Space\")\n            && this.keys.indexOf(e.code) === -1){\n                this.keys.push(e.code);\n            }\n            e.preventDefault();\n        });\n\n        window.addEventListener('keyup', e => {\n            if (e.code === 'ArrowDown' ||\n                e.code === 'ArrowUp' ||\n                e.code === 'ArrowLeft' ||\n                e.code === 'ArrowRight' ||\n                e.code === \"Space\") {\n                this.keys.splice(this.keys.indexOf(e.code), 1);\n            }\n            e.preventDefault();\n        })\n    }\n}","\nexport default class Character{\n    constructor(game){\n        this.game = game;\n        this.width = 100;\n        this.height = 100;\n        this.x = 450;\n        this.y = 120;\n        this.desiredX = 350;\n        this.desiredY = 0;\n        this.maxSpeed = 5;\n        this.xVelocity = 0;\n        this.yVelocity = 0;\n        this.spriteWidth = 129;\n        this.spriteHeight = 128;\n        this.frame = 1;\n        this.timer = 0;\n        this.lastMovingLeft = false\n        this.lastMovingUp = false\n    }  \n\n    update(input, isDying){\n        if(isDying){\n            return;\n        }\n        let xSpeed = 0;\n        let ySpeed = 0;\n\n        //horizontal movement\n\n        if(input.includes('ArrowRight')) {\n            this.lastMovingLeft = false\n            this.xVelocity = Math.min(1, this.xVelocity + 0.05)\n            xSpeed = (this.maxSpeed * this.xVelocity);\n        } else if (input.includes('ArrowLeft')) {\n            this.lastMovingLeft = true\n            this.xVelocity = Math.min(1, this.xVelocity + 0.05)\n            xSpeed = -(this.maxSpeed * this.xVelocity);\n        } else {\n            this.xVelocity = Math.max(0, this.xVelocity - 0.1)\n            xSpeed = (this.maxSpeed * this.xVelocity);\n            if (this.lastMovingLeft) {\n                xSpeed *= -1\n            }\n        }\n    \n        // vertical movement\n        if (input.includes('ArrowUp')){\n            this.lastMovingUp = true\n            this.yVelocity = Math.min(1, this.yVelocity + 0.05)\n            ySpeed = -(this.maxSpeed * this.yVelocity);\n        } else if (input.includes('ArrowDown')){\n            this.lastMovingUp = false\n            this.yVelocity = Math.min(1, this.yVelocity + 0.05)\n            ySpeed = (this.maxSpeed * this.yVelocity);\n        } else {\n            this.yVelocity = Math.max(0, this.yVelocity - 0.1)\n            ySpeed = (this.maxSpeed * this.yVelocity);\n            if (this.lastMovingUp) {\n                ySpeed *= -1\n            }\n        }\n\n        if (this.xVelocity != 0 || this.yVelocity != 0) {\n            this.timer++;\n            if (this.timer % 5 === 0) {\n                this.frame > 6 ? this.frame = 0 : this.frame++;\n            }\n        }\n\n\n        this.desiredX = this.x + xSpeed;\n        this.desiredY = this.y + ySpeed;  \n    \n        if (this.desiredX <= 0) this.desiredX = this.x;\n        if (this.desiredX >= this.game.dimensions.width - this.width) this.desiredX = this.x;\n        if (this.desiredY <= 100) this.desiredY = this.y;\n        if (this.desiredY >= this.game.dimensions.height - this.height) this.desiredY = this.y;\n    }\n\n\n    draw(ctx){\n        let playerImage = new Image();\n        playerImage.src = './images/spritesheet.png';\n        ctx.drawImage(playerImage, this.frame * this.spriteWidth, this.spriteHeight * 2.03, this.spriteWidth, this.spriteHeight, this.x, this.y, this.width, this.height)\n    }\n\n}\n\n","\n\nexport default class Enemy {\n    constructor(game){\n        this.game = game\n        this.width = 75;\n        this.height = 75;\n        this.x = 0;\n        this.y = 0;\n        this.speed = 0;\n        this.maxSpeed = 5;\n        this.spriteWidth = 16;\n        this.spriteHeight = 24;\n        this.numOfEnemies = 5;\n        this.speed = 1 ;\n        this.frame = 0;\n        this.timer = 0;\n    }  \n\n    update(){\n        this.x += this.speed ;\n        this.y += this.speed;\n\n        this.timer++;\n        if (this.timer % 3 === 0){\n            this.frame > 4 ? this.frame = 0 : this.frame++;\n        }\n    }\n    \n    draw(ctx) {\n        let playerImage = new Image();\n        playerImage.src = './images/Bat_Sprite_Sheet.png';\n        ctx.drawImage(playerImage, this.frame * this.spriteWidth, this.spriteHeight, this.spriteWidth, this.spriteHeight, this.x, this.y, this.width, this.height);\n    }\n\n}","import Board from './board';\nimport InputHandler from './input';\nimport Character from './character'\nimport Enemy from './enemy';\n\nexport default class Game{\n    constructor(candleCanvas, screenCanvas){\n        this.candleCanvas = candleCanvas;\n        this.screenCanvas = screenCanvas;\n        this.candleCtx = candleCanvas.getContext('2d');\n        this.screenCtx = screenCanvas.getContext('2d');\n        this.score = 0;\n        this.secondsRemaining = 20;\n        this.winningScore = 100;\n        this.dimensions = { width: candleCanvas.width, height: candleCanvas.height }\n        this.board = new Board(candleCanvas, screenCanvas);\n        this.player = new Character(this);\n        this.input = new InputHandler();\n        this.enemy = new Enemy(this);\n        this.timer = 0;\n        this.collidedTimer = 0;\n        this.dyingFrame = 0;\n        this.spriteWidth = 129;\n        this.spriteHeight = 128;\n        this.startTimer();\n        this.collided = false;\n        this.lightning = 0;\n        this.startLightningLoop(); \n        this.isOver = false\n        this.lightningLoopTimer = 0;\n        this.music = document.createElement(\"audio\");\n        this.music.src = \"./images/background_audio.mp3\";\n        this.music.volume = 0.1;\n        this.music.play();\n        this.userWon = false;\n        this.audioElement = document.getElementById(\"audio\");\n        this.isDying = false;\n    }\n\n    update(){\n        if (this.isOver) return;\n        this.enemy.update();\n        let wasCollided = this.collided;\n        this.detectEnemyCollisions();\n        if (wasCollided === false && this.collided === true && this.isDying === false) {\n            this.isDying = true;\n        }\n        this.player.update(this.input.keys, this.isDying);\n        this.drawCharacter();\n        this.board.update(this.player, this.input.keys, this.candleCtx);\n        this.checkGameStatus();\n        \n    }\n\n    draw(){\n        this.candleCtx.clearRect(0, 0, this.dimensions.width, this.dimensions.height);\n        this.screenCtx.clearRect(0, 0, this.dimensions.width, this.dimensions.height);\n        this.board.draw(this.player);\n        if (this.isDying) { \n            let playerImage = new Image();\n            playerImage.src = './images/spritesheet.png';\n            this.candleCtx.drawImage(playerImage, Math.min(this.dyingFrame, 9) * this.spriteWidth, this.spriteHeight, this.spriteWidth, this.spriteHeight, this.player.x, this.player.y, this.player.width, this.player.height)\n            if (this.dyingFrame < 200) this.dyingFrame++;\n            else {\n                this.isDying = false;\n                this.dyingFrame = 0;\n            }\n        } else {\n            this.player.draw(this.candleCtx);\n        }\n        this.enemy.draw(this.candleCtx);  \n        this.drawTimer();\n    }\n\n    startTimer(){\n        this.timer = setInterval(this.decrementSecondsRemaining.bind(this), 1000);\n    }\n\n    decrementSecondsRemaining() {\n        this.secondsRemaining--;\n        if (this.secondsRemaining <= 0) {\n            this.gameOver();\n        }\n    }\n\n    startLightningLoop(){\n        this.lightningLoopTimer = setInterval(this.runLightningAnimations.bind(this), 8000);\n    }\n\n    runLightningAnimations(){\n        this.startLightning();\n        setTimeout(this.stopLightning, 3000);\n    }\n\n    startLightning(){\n        let changeBackground = document.getElementsByClassName(\"background\")[0];\n        changeBackground.classList.add(\"lightningAnimationForBackground\");\n        let getScreenCanvas = document.getElementById(\"screen-canvas\");\n        getScreenCanvas.classList.add(\"lightningAnimationForScreen\");\n        this.audioElement.play();  \n    }\n\n    stopLightning(){\n        let changeBackground = document.getElementsByClassName(\"background\")[0];\n        changeBackground.classList.remove(\"lightningAnimationForBackground\");\n        let getScreenCanvas = document.getElementById(\"screen-canvas\");\n        getScreenCanvas.classList.remove(\"lightningAnimationForScreen\");\n    }\n\n    checkGameStatus(){\n        if (this.secondsRemaining <= 0 && this.board.allCandlesLit == false){\n           this.gameOver(); \n        }\n        if (this.board.allCandlesLit == true && this.secondsRemaining > 0){\n            this.gameWon();\n        }\n    }\n\n    gameWon(){\n        this.audioElement.pause()\n        clearInterval(this.timer);\n        clearInterval(this.lightningLoopTimer);\n        this.isOver = true\n        let unhideWinnerScreen = document.getElementById(\"winner_screen\");\n        unhideWinnerScreen.classList.remove(\"hidden\");\n    }\n\n    gameOver(){\n        this.audioElement.pause();\n        clearInterval(this.timer);\n        clearInterval(this.lightningLoopTimer);\n        this.isOver = true\n        let unhide = document.getElementById(\"end_game_screen\");\n        unhide.classList.remove(\"hidden\");\n    }\n\n    detectEnemyCollisions() {\n        let batX = this.enemy.x;\n        let batY = this.enemy.y;\n        let playerX = this.player.x\n        let playerY = this.player.y\n\n        this.isColliding(playerX, playerY, this.player.width, this.player.height,\n            batX, batY, this.enemy.width, this.enemy.height)\n    }\n\n    drawTimer(){\n        this.candleCtx.font = \"40px Nerko One\";\n        this.candleCtx.fillStyle = \"#FFFFFF\";\n        this.candleCtx.fillText(`Time Left: ${this.secondsRemaining} `, 20, 75);\n    }\n\n    isColliding(area1x, area1y, area1width, area1height, area2x, area2y, area2width, area2height){\n        if (area1x > area2x + area2width ||\n            area1x + area1width < area2x ||\n            area1y > area2y + area2height ||\n            area1y + area1height < area2y ){\n                this.collided = false;\n            } else {\n                this.collided = true;\n        }\n    }\n\n    drawCharacter(){\n        this.player.x = this.player.desiredX;\n        this.player.y = this.player.desiredY;\n    }\n   \n}\n\n\n\n","import Game from './candle_chase/game';\n\nconst candleCanvas = document.getElementById(\"candle-canvas\");\nconst screenCanvas = document.getElementById(\"screen-canvas\");\n\nlet game = null;\n\nwindow.addEventListener('keydown', e =>{\n    if (e.code === 'Space') {\n        if (!game) {\n            game = new Game(candleCanvas, screenCanvas);\n            let startGame = document.getElementById(\"start_game_screen\");\n            startGame.classList.add(\"hidden\");\n            animate();\n        } else if(game.isOver) {\n\n            game = new Game(candleCanvas, screenCanvas);\n            let endGame = document.getElementById(\"end_game_screen\");\n            endGame.classList.add(\"hidden\");\n            let winnerGame = document.getElementById(\"winner_screen\");\n            winnerGame.classList.add(\"hidden\");\n        }       \n    }\n})  \nlet unmuteButton = document.getElementById(\"unmuteButton\");\nlet muteButton = document.getElementById(\"muteButton\");\nunmuteButton.classList.add(\"hidden\");\nmuteButton.addEventListener(\"click\", () => {\n    game.music.volume = 0.0;\n    game.audioElement.volume = 0.0;\n    unmuteButton.classList.remove(\"hidden\");\n    muteButton.classList.add(\"hidden\");\n});\n\nunmuteButton.addEventListener(\"click\", () => {\n    game.music.volume = 0.1;\n    game.audioElement.volume = 0.1;\n    muteButton.classList.remove(\"hidden\");\n    unmuteButton.classList.add(\"hidden\");\n});\n\n\nfunction animate() {\n    game.update();\n    game.draw();\n    requestAnimationFrame(animate);\n};"],"names":["Position","constructor","row","col","this","Candle","x","y","isLit","width","height","Board","candleCanvas","screenCanvas","candleCtx","getContext","screenCtx","dimensions","grid","makeEmptyGrid","candles","generateCandles","allCandlesLit","candleWidth","candleHeight","speed","maxSpeed","spriteWidth","spriteHeight","frame","timer","update","character","keys","includes","allLit","i","length","candle","a","b","Math","sqrt","draw","drawAllCandles","drawInitialScreen","removeScreen","removeScreenForTimer","topLeft","topRight","bottomLeft","bottomRight","fillStyle","fillRect","fill","globalCompositeOperation","shadowBlur","shadowColor","lineWidth","stroke","radius","beginPath","arc","PI","push","isValidPos","pos","isEmpty","isAvailableForPlacement","rowAdjust","colAdjust","newPos","placedCount","attempts","candleRow","floor","random","candleCol","gridPosition","calculateXY","xOffset","yOffset","newCandle","console","error","hash","placeableHeight","candleImage","litCandle","Image","src","drawImage","onload","InputHandler","window","addEventListener","e","code","indexOf","preventDefault","splice","Character","game","desiredX","desiredY","xVelocity","yVelocity","lastMovingLeft","lastMovingUp","input","isDying","xSpeed","ySpeed","min","max","ctx","playerImage","Enemy","numOfEnemies","Game","score","secondsRemaining","winningScore","board","player","enemy","collidedTimer","dyingFrame","startTimer","collided","lightning","startLightningLoop","isOver","lightningLoopTimer","music","document","createElement","volume","play","userWon","audioElement","getElementById","wasCollided","detectEnemyCollisions","drawCharacter","checkGameStatus","clearRect","drawTimer","setInterval","decrementSecondsRemaining","bind","gameOver","runLightningAnimations","startLightning","setTimeout","stopLightning","getElementsByClassName","classList","add","remove","gameWon","pause","clearInterval","batX","batY","playerX","playerY","isColliding","font","fillText","area1x","area1y","area1width","area1height","area2x","area2y","area2width","area2height","animate","unmuteButton","muteButton","requestAnimationFrame"],"sourceRoot":""}